package com.johnmalcolmnorwood.hashbash.rainbow.function;


public class ReductionFunctionFamilies {

    private static byte bitwiseOrChainIndex(byte hashByte, int chainIndex) {
        byte result = hashByte;
        result ^= chainIndex >> 24;
        result ^= chainIndex >> 16 & 0xff;
        result ^= chainIndex >> 8 & 0xff;
        result ^= chainIndex & 0xff;

        return result;
    }

    /**
     * Return the standard reduction family function used for this project. This reduction function generates a new key
     * using bitwise operations on the hash and the chain index. Each byte of the new key is generated by bitwise xor-ing
     * each byte
     *
     *
     * @param passwordLength
     * @param charset
     * @return
     */
    public static ReductionFunctionFamily defaultReductionFunctionFamily(int passwordLength, String charset) {
        return (hash, chainIndex) -> {
            byte[] hashBytes = hash.asBytes();
            StringBuilder plainTextBuilder = new StringBuilder();

            for (byte i = 0; i < passwordLength; ++i) {
                byte value = 0;
                for (byte j = i; j < hashBytes.length; j += passwordLength) {
                    value ^= bitwiseOrChainIndex(hashBytes[j], chainIndex);
                }

                int index = Byte.toUnsignedInt(value) % charset.length();
                char keyChar = charset.charAt(index);
                plainTextBuilder.append(keyChar);
            }

            return plainTextBuilder.toString();
        };
    }
}
