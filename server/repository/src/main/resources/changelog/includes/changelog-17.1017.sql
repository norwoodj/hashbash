--liquibase formatted SQL

--changeset jnorwood:spring-batch
CREATE TABLE BATCH_JOB_INSTANCE  (
  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
  VERSION BIGINT ,
  JOB_NAME VARCHAR(100) NOT NULL,
  JOB_KEY VARCHAR(32) NOT NULL,
  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
  JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
  VERSION BIGINT  ,
  JOB_INSTANCE_ID BIGINT NOT NULL,
  CREATE_TIME DATETIME NOT NULL,
  START_TIME DATETIME DEFAULT NULL ,
  END_TIME DATETIME DEFAULT NULL ,
  STATUS VARCHAR(10) ,
  EXIT_CODE VARCHAR(2500) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED DATETIME,
  JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
  constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
  references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
  JOB_EXECUTION_ID BIGINT NOT NULL ,
  TYPE_CD VARCHAR(6) NOT NULL ,
  KEY_NAME VARCHAR(100) NOT NULL ,
  STRING_VAL VARCHAR(250) ,
  DATE_VAL DATETIME DEFAULT NULL ,
  LONG_VAL BIGINT ,
  DOUBLE_VAL DOUBLE PRECISION ,
  IDENTIFYING CHAR(1) NOT NULL ,
  constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
  STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
  VERSION BIGINT NOT NULL,
  STEP_NAME VARCHAR(100) NOT NULL,
  JOB_EXECUTION_ID BIGINT NOT NULL,
  START_TIME DATETIME NOT NULL ,
  END_TIME DATETIME DEFAULT NULL ,
  STATUS VARCHAR(10) ,
  COMMIT_COUNT BIGINT ,
  READ_COUNT BIGINT ,
  FILTER_COUNT BIGINT ,
  WRITE_COUNT BIGINT ,
  READ_SKIP_COUNT BIGINT ,
  WRITE_SKIP_COUNT BIGINT ,
  PROCESS_SKIP_COUNT BIGINT ,
  ROLLBACK_COUNT BIGINT ,
  EXIT_CODE VARCHAR(2500) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED DATETIME,
  constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
  STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT TEXT ,
  constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
  references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
  JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT TEXT ,
  constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
  references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
  ID BIGINT NOT NULL,
  UNIQUE_KEY CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
  ID BIGINT NOT NULL,
  UNIQUE_KEY CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
  ID BIGINT NOT NULL,
  UNIQUE_KEY CHAR(1) NOT NULL,
  constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);


--changeset jnorwood:HB-0
CREATE TABLE `rainbow_table` (
  `id`               SMALLINT     NOT NULL AUTO_INCREMENT,
  `name`             VARCHAR(64)  NOT NULL,
  `numChains`        BIGINT       NOT NULL,
  `chainLength`      BIGINT       NOT NULL,
  `passwordLength`   SMALLINT     NOT NULL,
  `characterSet`     VARCHAR(256) NOT NULL,
  `hashFunction`     VARCHAR(16)  NOT NULL,
  `finalChainCount`  BIGINT       NOT NULL DEFAULT 0,
  `batchExecutionId` BIGINT,
  `created`          DATETIME     NOT NULL,
  `lastUpdated`      TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`batchExecutionId`) REFERENCES `BATCH_STEP_EXECUTION` (`STEP_EXECUTION_ID`),
  UNIQUE INDEX (`name`),
  INDEX (`numChains`),
  INDEX (`chainLength`),
  INDEX (`passwordLength`),
  INDEX (`hashFunction`),
  INDEX (`finalChainCount`)
);

CREATE TABLE `rainbow_chain` (
  `startPlaintext` VARCHAR(32)  NOT NULL,
  `endHash`        VARCHAR(128) NOT NULL,
  `rainbowTableId` SMALLINT     NOT NULL,
  PRIMARY KEY (`rainbowTableId`, `endHash`),
  FOREIGN KEY (`rainbowTableId`) REFERENCES `rainbow_table` (`id`) ON DELETE CASCADE
);

--changeset jnorwood:HB-1
CREATE TABLE `rainbow_table_unique_password` (
  `rainbowTableId` SMALLINT     NOT NULL,
  `password`       VARCHAR(32)  NOT NULL,
  PRIMARY KEY (`rainbowTableId`, `password`),
  FOREIGN KEY (`rainbowTableId`) REFERENCES `rainbow_table` (`id`) ON DELETE CASCADE
);

--changeset jnorwood:HB-2
CREATE TABLE `rainbow_table_search` (
  `id`             BIGINT       NOT NULL AUTO_INCREMENT,
  `rainbowTableId` SMALLINT     NOT NULL,
  `hash`           VARCHAR(128) NOT NULL,
  `status`         VARCHAR(16)  NOT NULL,
  `password`       VARCHAR(32),
  `created`        DATETIME     NOT NULL,
  `lastUpdated`    TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`rainbowTableId`) REFERENCES `rainbow_table` (`id`) ON DELETE CASCADE,
  UNIQUE INDEX (`rainbowTableId`, `hash`)
);
