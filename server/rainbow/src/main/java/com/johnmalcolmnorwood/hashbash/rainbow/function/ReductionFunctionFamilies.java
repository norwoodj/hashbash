package com.johnmalcolmnorwood.hashbash.rainbow.function;


public class ReductionFunctionFamilies {

    private static byte bitwiseOrChainIndex(byte hashByte, int chainIndex) {
        byte result = hashByte;
        result ^= chainIndex >> 8 & 0xff;
        result ^= chainIndex & 0xff;

        return result;
    }

    /**
     * Return the standard reduction family function used for this project. This reduction function generates a new key
     * using bitwise operations on the hash and the chain index. Each byte of the new key is generated by bitwise xor-ing
     * each byte
     *
     * @param passwordLength The length of passwords that we're reducing to
     * @param charset        The character set of passwords that we're reducing to
     * @return The family of reduction functions that will be used to reduce at each link of the rainbow chains
     */
    public static ReductionFunctionFamily defaultReductionFunctionFamily(int passwordLength, String charset) {
        return (hash, chainIndex) -> {
            StringBuilder plainTextBuilder = new StringBuilder();
            byte[] hashBytes = hash.asBytes();

            for (int i = 0; i < passwordLength; ++i) {
                int value = Math.abs((hashBytes[i] ^ chainIndex) % charset.length());
                plainTextBuilder.append(charset.charAt(value));
            }

            return plainTextBuilder.toString();
        };
    }
}
